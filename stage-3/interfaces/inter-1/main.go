// Пришло время для задач, где вы сможете применить полученные знания на практике.

// Обязательные условия выполнения: данные со стандартного ввода читаются функцией readTask(), которая возвращает 3 значения типа пустой интерфейс. Эта функция использует пакеты encoding/json, fmt, и os - не удаляйте их из импорта. Скорее всего, вам понадобится пакет "fmt", но вы можете использовать любой другой пакет для записи в стандартный вывод не удаляя fmt.

// Итак, вы получаете 3 значения типа пустой интерфейс: если все удачно, то первые 2 значения будут float64. Третье значение в идеальном случае будет строкой, которая может иметь значения: "+", "-", "*", "/" (определенная математическая операция). Но такие идеальные случаи будут не всегда, вы можете получить значения других типов, а также строка в третьем значении может не относится к одной из указанных математических операций.

// Результат выполнения программы должен быть таков:

// в штатной ситуации вы должны напечатать в стандартный вывод результат выполнения математической операции с точностью до 4 цифры после запятой (fmt.Printf(%.4f));
// если первое или второе значение не является типом float64, вы должны напечатать сообщение об ошибке вида: value=полученное_значение: тип_значения (например: value=true: bool)
// если третье значение имеет неверный тип или передан знак, не относящийся к указанным выше математическим операциям, сообщение об ошибке должно иметь вид: неизвестная операция
// Гарантируется, что ошибка в аргументах может быть только одна, поэтому если вы при проверке первого значения увидели, что оно содержит ошибку - печатайте сообщение об ошибке и завершайте работу программы, проверка остальных аргументов значения уже не имеет, а проверяющая система воспримет 2 сообщения об ошибке как нарушение условия выполнения задания.

// Удачи!

package main

import (
		"encoding/json" // пакет используется для проверки ответа, не удаляйте его
		"fmt"           // пакет используется для проверки ответа, не удаляйте его
		"os"            // пакет используется для проверки ответа, не удаляйте его
)

func readTask(value1 float64, value2 float64, operation string)  interface{} {
	return value1
	return value2
	return operation
}
func main() {
	value1,value2,operation:= readTask()
	var (
		v1,v2 float64
		op string
	)
	switch value1.(type) {
	case float64:
		v1 = value1.(float64)
	default:
		fmt.Printf("value=%v: %T", value1, value1)
		return
	}
	switch value2.(type) {
	case float64:
		v2 = value2.(float64)
	default:
		fmt.Printf("value=%v: %T", value2, value2)
		return
	}
	switch operation.(type) {
	case string:
		op = operation.(string)
	default:
		fmt.Printf("value=%v: %T", operation, operation)
	}
	switch op {
	case "+":
		fmt.Printf("%.4f", v1+v2)
	case "-":
		fmt.Printf("%.4f",v1-v2)
	case "*":
		fmt.Printf("%.4f", v1*v2)
	case "/":
		fmt.Printf("%.4f", v1/v2)
	default:
		fmt.Println("неизвестная операция")
	}
}
